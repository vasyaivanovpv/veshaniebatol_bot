const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const rateLimit = require("telegraf-ratelimit");
const { CHANNEL, ADMIN_PVB } = require("../../config");
const { typesQuery, trackSizeLimit, trackCaption } = require("../../constants");

const User = require("../../models/User");
const Round = require("../../models/Round");
const Track = require("../../models/Track");

const limitConfig = {
  window: 5 * 1000,
  limit: 1,
  keyGenerator: function (ctx) {
    return ctx.chat.id;
  },
  onLimitExceeded: async (ctx) =>
    await ctx.reply("–ù–µ —Å–ø–µ—à–∏, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è!"),
};

const sendTrack = new Scene("send_track");

sendTrack.use(rateLimit(limitConfig));

sendTrack.command("cancel", async (ctx) => {
  return ctx.scene.enter("main_menu");
});

sendTrack.enter(async (ctx) => {
  const roundDB = await Round.findOne({ status: "active" });

  await ctx.replyWithMarkdown(
    `üè† *–°–¥–∞—Ç—å —Ç—Ä–µ–∫* \n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Ç—Ä–µ–∫ –Ω–∞ ${roundDB.name} *–≤ —Ñ–æ—Ä–º–∞—Ç–µ mp3* –∏ —Ä–∞–∑–º–µ—Ä–æ–º *–Ω–µ –±–æ–ª–µ–µ 20–º–±*. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ—ç—Ç–æ–º—É –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –æ —Ç–æ–º —á—Ç–æ —Ç—Ä–µ–∫ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. \n\n_–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /cancel._`
  );
});

const { downloadFIle, removeFile } = require("../../utils");

sendTrack.on("audio", async (ctx) => {
  const { audio } = ctx.message;

  if (audio.file_size > trackSizeLimit)
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞! –ü—Ä–∏–Ω–∏–º–∞—é —Ç—Ä–µ–∫ *–Ω–µ –±–æ–ª–µ–µ 20–º–±*.`
    );

  const userDB = await User.findOne({
    telegramId: ctx.from.id,
  });
  const roundDB = await Round.findOne({ status: "active" });
  const fileDest = `src/temp/${userDB.rapName}.mp3`;

  const fileLink = await ctx.telegram.getFileLink(audio.file_id);
  const uploadText = await ctx.replyWithMarkdown(`‚ùóÔ∏è –ó–∞–≥—Ä—É–∂–∞—é...`);

  await downloadFIle(fileLink, fileDest);

  const trackTitle = roundDB.index
    ? `${roundDB.theme} (${roundDB.name})`
    : roundDB.name;

  const trackMessage = await ctx.replyWithAudio(
    { source: fileDest },
    {
      duration: audio.duration,
      performer: userDB.rapName,
      title: trackTitle,
      caption: trackCaption,
    }
  );

  await ctx.telegram.editMessageText(
    ctx.chat.id,
    uploadText.message_id,
    null,
    `‚ùóÔ∏è –¢–≤–æ–π —Ç—Ä–µ–∫ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!`
  );

  await removeFile(fileDest);

  const adminMessage = await ctx.telegram.sendAudio(
    ADMIN_PVB,
    trackMessage.audio.file_id,
    {
      parse_mode: "Markdown",
      caption: trackCaption,
    }
  );

  const trackDB = await new Track({
    uploadedAt: new Date(),
    user: userDB._id,
    round: roundDB._id,
    pair: roundDB.isPaired ? userDB.currentPair : 0,
    trackId: trackMessage.audio.file_id,
    adminMessageId: adminMessage.message_id,
  });
  await trackDB.save();

  await ctx.telegram.sendMessage(
    ADMIN_PVB,
    `–¢—Ä–µ–∫ –æ—Ç *${userDB.rapName}* \n\n–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–µ–∫, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞ —Ä–∞—É–Ω–¥!`,
    Markup.inlineKeyboard([
      [
        Markup.callbackButton(
          "–£–¥–∞–ª–∏—Ç—å",
          JSON.stringify({
            type: typesQuery.DELETE,
            aMId: adminMessage.message_id,
          })
        ),
        Markup.callbackButton(
          "–ü—Ä–∏–Ω—è—Ç—å",
          JSON.stringify({
            type: typesQuery.ACCEPT,
            aMId: adminMessage.message_id,
          })
        ),
      ],
    ]).extra({ parse_mode: "Markdown" })
  );

  return ctx.scene.enter("main_menu");
});

sendTrack.use(async (ctx) => {
  await ctx.replyWithMarkdown(`‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç—Ä–µ–∫ –≤ mp3!`);
});

module.exports = sendTrack;
