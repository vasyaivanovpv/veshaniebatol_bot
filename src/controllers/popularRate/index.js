const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const rateLimit = require("telegraf-ratelimit");
const { typesQuery } = require("../../constants");
const { shuffleArray } = require("../../utils");

const Track = require("../../models/Track");
const User = require("../../models/User");

const limitConfig = {
  window: 3 * 1000,
  limit: 1,
  keyGenerator: function (ctx) {
    return ctx.chat.id;
  },
  onLimitExceeded: async (ctx) => {
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
    await ctx.reply("‚ùóÔ∏è –ù–µ —Å–ø–µ—à–∏, –ø–æ—Å–ª—É—à–∞–π —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–∫!");
  },
};

const actionBtnValues = [
  { type: typesQuery.DISLIKE, text: "üí©" },
  { type: typesQuery.LIKE, text: "üíñ" },
];

const mainMenuBtn = [
  Markup.callbackButton(
    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    JSON.stringify({
      type: typesQuery.MAIN_MENU,
    })
  ),
];

const getIK = (trackDbId) => {
  const actionBtns = actionBtnValues.map((value) =>
    Markup.callbackButton(
      value.text,
      JSON.stringify({
        type: value.type,
        id: trackDbId,
      })
    )
  );

  return [actionBtns, mainMenuBtn];
};

const sendNextTrack = async (ctx) => {
  const userDB = await User.findOne({ telegramId: ctx.from.id });
  if (!userDB.tempRateTracks.length) {
    await ctx.replyWithMarkdown(
      `‚ùóÔ∏è –¢—ã –æ—Ü–µ–Ω–∏–ª –≤—Å–µ —Ç—Ä–µ–∫–∏! –ù–æ –º–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ!`
    );
    return ctx.scene.enter("popular_rate");
  }

  const firstTrackId = userDB.tempRateTracks.shift();
  await userDB.save();

  const trackDB = await Track.findById(firstTrackId);
  const ik = getIK(firstTrackId);

  await ctx.editMessageReplyMarkup();
  await ctx.replyWithAudio(trackDB.trackId, Markup.inlineKeyboard(ik).extra());
};

const popularRate = new Scene("popular_rate");

popularRate.use(rateLimit(limitConfig));

popularRate.start(async (ctx) => {
  return ctx.scene.enter("main_menu");
});

popularRate.enter(async (ctx) => {
  const userDB = await User.findOne({ telegramId: ctx.from.id });
  const tracksDB = await Track.find({ user: { $ne: userDB._id } }, "_id");
  if (!tracksDB.length) {
    await ctx.replyWithMarkdown(
      `‚ùóÔ∏è –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è! –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start`
    );
    return ctx.scene.enter("main_menu");
  }

  await ctx.replyWithMarkdown(
    "üé∂ *–û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫–∏* \n\n*–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º!* –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∞–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Ç—Ä–µ–∫–∏ —Å–æ –≤—Å–µ–π –±–∞–∑—ã –ü–í–ë9. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–ø–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–∫–∏, –∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ *–Ω–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è*, –Ω–æ –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑ –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏. –ö–Ω–æ–ø–∫–∞ üíñ —ç—Ç–æ +1 –±–∞–ª–ª, –∞ –∫–Ω–æ–ø–∫–∞ üí© —ç—Ç–æ -1 –±–∞–ª–ª."
  );

  const trackIds = tracksDB.map((track) => track._id.toString());
  shuffleArray(trackIds);

  const firstTrackId = trackIds.shift();

  userDB.tempRateTracks = trackIds;
  await userDB.save();

  const trackDB = await Track.findById(firstTrackId);
  const ik = getIK(firstTrackId);

  return ctx.replyWithAudio(trackDB.trackId, Markup.inlineKeyboard(ik).extra());
});

popularRate.on("callback_query", async (ctx) => {
  const { type, id } = JSON.parse(ctx.callbackQuery.data);

  let prevTrackDB;

  switch (type) {
    case typesQuery.LIKE:
      prevTrackDB = await Track.findById(id);
      prevTrackDB.popularRate = prevTrackDB.popularRate + 1;
      await prevTrackDB.save();

      await ctx.answerCbQuery();
      return sendNextTrack(ctx);

    case typesQuery.DISLIKE:
      prevTrackDB = await Track.findById(id);
      prevTrackDB.popularRate = prevTrackDB.popularRate - 1;
      await prevTrackDB.save();

      await ctx.answerCbQuery();
      return sendNextTrack(ctx);

    case typesQuery.MAIN_MENU:
      await ctx.answerCbQuery();
      return ctx.scene.enter("main_menu");
    default:
      return ctx.answerCbQuery("–ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏");
  }
});

popularRate.use(async (ctx) => {
  return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start`);
});

module.exports = popularRate;
