const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const rateLimit = require("telegraf-ratelimit");
const { typesQuery } = require("../../constants");

const Track = require("../../models/Track");
const User = require("../../models/User");

const limitConfig = {
  window: 1 * 1000,
  limit: 1,
  keyGenerator: function (ctx) {
    return ctx.chat.id;
  },
  onLimitExceeded: async (ctx) => {
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
    await ctx.reply("‚ùóÔ∏è –ù–µ —Å–ø–µ—à–∏, –ø–æ—Å–ª—É—à–∞–π —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–∫!");
  },
};

const actionBtnValues = [
  { type: typesQuery.DISLIKE, text: "üí©" },
  { type: typesQuery.LIKE, text: "üíñ" },
];

const mainMenuBtn = [
  Markup.callbackButton(
    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    JSON.stringify({
      type: typesQuery.MAIN_MENU,
    })
  ),
];

const getIK = (trackDbId) => {
  const actionBtns = actionBtnValues.map((value) =>
    Markup.callbackButton(
      value.text,
      JSON.stringify({
        type: value.type,
        id: trackDbId,
      })
    )
  );

  return [actionBtns, mainMenuBtn];
};

const sendNextTrack = async (ctx) => {
  const filter = await getFilter(ctx.from.id);
  const trackDB = await Track.findOne(filter, "trackId", {
    sort: { uploadedAt: 1 },
  });
  if (!trackDB) return ctx.scene.enter("main_menu");

  const ik = getIK(trackDB._id.toString());

  await ctx.editMessageReplyMarkup();
  return ctx.replyWithAudio(trackDB.trackId, Markup.inlineKeyboard(ik).extra());
};

const getFilter = async (userTgId) => {
  const userDB = await User.findOne({ telegramId: userTgId });
  return {
    user: { $ne: userDB._id },
    rateUsers: { $ne: userTgId },
  };
};

const popularRate = new Scene("popular_rate");

popularRate.use(rateLimit(limitConfig));

popularRate.start(async (ctx) => {
  return ctx.scene.enter("main_menu");
});

popularRate.enter(async (ctx) => {
  const filter = await getFilter(ctx.from.id);

  const countTracksDB = await Track.countDocuments(filter);
  if (!countTracksDB) {
    await ctx.replyWithMarkdown(`‚ùóÔ∏è –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è!`);
    return ctx.scene.enter("main_menu");
  }

  await ctx.replyWithMarkdown(
    "üé∂ *–û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫–∏* \n\n*–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º!* –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–µ–±–µ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤—Å–µ —Ç—Ä–µ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å –ø—Ä–æ–º–æ —Ä–∞—É–Ω–¥–∞ –ü–í–ë9. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–ø–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–∫–∏, –∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ *–Ω–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è*. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ —Å –±–∞—Ç–ª–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ü–µ–Ω–∏—Ç—å *—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑*! –ö–Ω–æ–ø–∫–∞ üíñ —ç—Ç–æ +1 –±–∞–ª–ª, –∞ –∫–Ω–æ–ø–∫–∞ üí© —ç—Ç–æ 0 –±–∞–ª–ª–æ–≤."
  );
  await ctx.replyWithMarkdown(
    `‚ùóÔ∏è –û—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ —Ç–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏: *${countTracksDB}!*`
  );

  const trackDB = await Track.findOne(filter, "trackId", {
    sort: { uploadedAt: 1 },
  });
  const ik = getIK(trackDB._id.toString());

  return ctx.replyWithAudio(trackDB.trackId, Markup.inlineKeyboard(ik).extra());
});

popularRate.leave(async (ctx) => {
  const filter = await getFilter(ctx.from.id);
  const countTracksDB = await Track.countDocuments(filter);

  await ctx.replyWithMarkdown(
    `‚ùóÔ∏è –û—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ —Ç–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏: *${countTracksDB}!*`
  );
});

popularRate.on("callback_query", async (ctx) => {
  const { type, id } = JSON.parse(ctx.callbackQuery.data);

  let trackDB;

  switch (type) {
    case typesQuery.LIKE:
      trackDB = await Track.findById(id);
      trackDB.popularRate = trackDB.popularRate + 1;
      trackDB.rateUsers.push(ctx.from.id);
      await trackDB.save();

      await ctx.answerCbQuery();
      return sendNextTrack(ctx);

    case typesQuery.DISLIKE:
      trackDB = await Track.findById(id);
      trackDB.rateUsers.push(ctx.from.id);
      await trackDB.save();

      await ctx.answerCbQuery();
      return sendNextTrack(ctx);

    case typesQuery.MAIN_MENU:
      await ctx.answerCbQuery();
      return ctx.scene.enter("main_menu");
    default:
      return ctx.answerCbQuery("–ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏");
  }
});

popularRate.use(async (ctx) => {
  return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start`);
});

module.exports = popularRate;
