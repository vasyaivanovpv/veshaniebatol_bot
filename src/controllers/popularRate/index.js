const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const rateLimit = require("telegraf-ratelimit");
const { typesQuery } = require("../../constants");
const { splitArray, calculateRate } = require("../../utils");

const Track = require("../../models/Track");
const User = require("../../models/User");
const Round = require("../../models/Round");

const limitConfig = {
  window: 1 * 1000,
  limit: 1,
  keyGenerator: function (ctx) {
    return ctx.chat.id;
  },
  onLimitExceeded: async (ctx) => {
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
    await ctx.reply("‚ùóÔ∏è –ù–µ —Å–ø–µ—à–∏, –ø–æ—Å–ª—É—à–∞–π —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–∫!");
  },
};

const actionBtnValues = [
  { text: "üí©", value: 0 },
  { text: "üíñ", value: 1 },
];

const mainMenuBtn = [
  Markup.callbackButton(
    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    JSON.stringify({
      type: typesQuery.MAIN_MENU,
    })
  ),
];

const selectRoundBtn = [
  Markup.callbackButton(
    "–í—ã–±—Ä–∞—Ç—å —Ä–∞—É–Ω–¥",
    JSON.stringify({
      type: typesQuery.ROUND_LIST,
    })
  ),
];

const getTrackIK = (trackDBid) => {
  const actionBtns = actionBtnValues.map((btn) =>
    Markup.callbackButton(
      btn.text,
      JSON.stringify({
        type: typesQuery.LIKE,
        id: trackDBid,
        v: btn.value,
      })
    )
  );

  return [actionBtns, selectRoundBtn];
};

const getRoundIK = async () => {
  const roundsDB = await Round.find(
    { status: ["active", "finished"] },
    "name",
    { sort: { index: 1 } }
  );

  const btns = roundsDB.map((round) =>
    Markup.callbackButton(
      round.name.split(" ")[0],
      JSON.stringify({
        type: typesQuery.SELECT_ROUND,
        id: round._id.toString(),
      })
    )
  );

  const ik = splitArray(btns);

  ik.push(mainMenuBtn);

  return ik;
};

const popularRate = new Scene("popular_rate");

popularRate.use(rateLimit(limitConfig));

popularRate.start(async (ctx) => {
  return ctx.scene.enter("main_menu");
});

popularRate.enter(async (ctx) => {
  const promoRoundDB = await Round.findOne({ index: 0 });
  const userDB = await User.findOne({ telegramId: ctx.from.id });

  ctx.session.rateOptions = {
    userDBid: userDB._id.toString(),
    roundDBid: promoRoundDB._id.toString(),
  };

  const countTracksDB = await Track.countDocuments({
    user: { $ne: ctx.session.rateOptions.userDBid },
    rateUsers: { $ne: ctx.from.id },
  });
  if (!countTracksDB) {
    await ctx.replyWithMarkdown(`‚ùóÔ∏è –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è!`);
    return ctx.scene.enter("main_menu");
  }

  const roundIK = await getRoundIK();

  await ctx.replyWithMarkdown(
    `üé∂ *–û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫–∏* \n\n*–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º!* –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–µ–±–µ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤—Å–µ —Ç—Ä–µ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π —Ä–∞—É–Ω–¥–∞ –ü–í–ë9. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–ø–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–∫–∏, –∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ *–Ω–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è*. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ —Å –±–∞—Ç–ª–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ü–µ–Ω–∏—Ç—å *—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑*! –ö–Ω–æ–ø–∫–∞ üíñ —ç—Ç–æ +1 –±–∞–ª–ª, –∞ –∫–Ω–æ–ø–∫–∞ üí© —ç—Ç–æ 0 –±–∞–ª–ª–æ–≤. \n\n–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ —Ç–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏: *${countTracksDB}!* \n\n*–í–´–ë–ï–†–ò –†–ê–£–ù–î!*`,
    Markup.inlineKeyboard(roundIK, { columns: 5 }).extra()
  );
});

popularRate.leave(async (ctx) => {
  const countTracksDB = await Track.countDocuments({
    user: { $ne: ctx.session.rateOptions.userDBid },
    rateUsers: { $ne: ctx.from.id },
  });

  delete ctx.session.rateOptions;

  await ctx.replyWithMarkdown(
    `‚ùóÔ∏è –û—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ —Ç–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏: *${countTracksDB}!*`
  );
});

popularRate.on("callback_query", async (ctx) => {
  const { type, id, v } = JSON.parse(ctx.callbackQuery.data);

  let trackDB, roundIK, trackIK;

  switch (type) {
    case typesQuery.SELECT_ROUND:
      trackDB = await Track.findOne(
        {
          user: { $ne: ctx.session.rateOptions.userDBid },
          round: id,
          rateUsers: { $ne: ctx.from.id },
        },
        "trackId",
        {
          sort: { uploadedAt: 1 },
        }
      );

      if (!trackDB) return ctx.answerCbQuery(`–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è!`);

      ctx.session.rateOptions.roundDBid = id;

      const roundDB = await Round.findById(id);
      trackIK = getTrackIK(trackDB._id.toString());

      await ctx.replyWithMarkdown(`‚ùóÔ∏è –¢—ã –≤—ã–±—Ä–∞–ª *${roundDB.name}*!`);

      await ctx.editMessageReplyMarkup();
      await ctx.answerCbQuery();
      return ctx.replyWithAudio(
        trackDB.trackId,
        Markup.inlineKeyboard(trackIK).extra()
      );

    case typesQuery.LIKE:
      trackDB = await Track.findById(id);
      trackDB.popularRate = trackDB.popularRate + v;
      trackDB.rateUsers.push(ctx.from.id);
      await trackDB.save();

      const popularRateCoef = calculateRate(
        trackDB.popularRate,
        trackDB.rateUsers.length
      );

      await Track.updateOne({ _id: id }, { popularRateCoef: popularRateCoef });

      trackDB = await Track.findOne(
        {
          user: { $ne: ctx.session.rateOptions.userDBid },
          round: ctx.session.rateOptions.roundDBid,
          rateUsers: { $ne: ctx.from.id },
        },
        "trackId",
        {
          sort: { uploadedAt: 1 },
        }
      );

      if (!trackDB) {
        roundIK = await getRoundIK();

        await ctx.editMessageReplyMarkup();
        await ctx.replyWithMarkdown(`‚ùóÔ∏è –° —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç—Ä–µ–∫–∏!`);
        return ctx.replyWithMarkdown(
          `‚ùóÔ∏è –í—ã–±–µ—Ä–∏ —Ä–∞—É–Ω–¥, —Ç—Ä–µ–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å!`,
          Markup.inlineKeyboard(roundIK, { columns: 5 }).extra()
        );
      }

      trackIK = getTrackIK(trackDB._id.toString());

      await ctx.editMessageReplyMarkup();
      await ctx.answerCbQuery();
      return ctx.replyWithAudio(
        trackDB.trackId,
        Markup.inlineKeyboard(trackIK).extra()
      );

    case typesQuery.ROUND_LIST:
      roundIK = await getRoundIK();

      await ctx.editMessageReplyMarkup();

      await ctx.replyWithMarkdown(
        `‚ùóÔ∏è –í—ã–±–µ—Ä–∏ —Ä–∞—É–Ω–¥, —Ç—Ä–µ–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å!`,
        Markup.inlineKeyboard(roundIK, { columns: 5 }).extra()
      );

      return ctx.answerCbQuery();

    case typesQuery.MAIN_MENU:
      await ctx.editMessageReplyMarkup();
      await ctx.answerCbQuery();
      return ctx.scene.enter("main_menu");
    default:
      return ctx.answerCbQuery("–ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏");
  }
});

popularRate.use(async (ctx) => {
  return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start`);
});

module.exports = popularRate;
