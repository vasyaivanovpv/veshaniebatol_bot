const Scene = require("telegraf/scenes/base");
const { textBlockLimits } = require("../../constants");

const User = require("../../models/User");

const registration = new Scene("registration");

registration.enter(async (ctx) => {
  await ctx.replyWithMarkdown(
    `üè† *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è* \n\n–í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º. –ò–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.`
  );
});

registration.on("text", async (ctx) => {
  const { text } = ctx.message;

  if (text.length > textBlockLimits.RAP_NAME) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.`
    );
  }

  if (text.search(/^[a-z–∞-—è—ë\d ]+$/i) === -1) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã! –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞.`
    );
  }

  const rapName = text
    .split(" ")
    .filter((str) => str)
    .map((str) => str.trim())
    .join(" ");

  const matchedUserDB = await User.findOne({
    rapName: { $regex: new RegExp("^" + rapName.toLowerCase(), "i") },
  });

  if (matchedUserDB) {
    return ctx.replyWithMarkdown(`‚ùóÔ∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º –∑–∞–Ω—è—Ç! –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π.`);
  }

  const userDB = await User.findOne({
    telegramId: ctx.from.id,
  });
  userDB.rapName = rapName;
  await userDB.save();

  return ctx.scene.enter("main_menu");
});

registration.use(async (ctx) => {
  await ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º!`);
});

module.exports = registration;
