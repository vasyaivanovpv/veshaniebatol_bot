const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const {
  typesQuery,
  trackStatus,
  innerRoundStatus,
} = require("../../constants");
const { checkJSONmw } = require("../../helpers");
const { toStringDate } = require("../../utils");

const User = require("../../models/User");
const Round = require("../../models/Round");
const Track = require("../../models/Track");

const mainMenu = new Scene("main_menu");

mainMenu.start(async (ctx) => {
  return ctx.scene.enter("main_menu");
});

mainMenu.enter(async (ctx) => {
  const userDB = await User.findOne({
    telegramId: ctx.from.id,
  });

  if (userDB && userDB.blocked) {
    userDB.blocked = false;
    await userDB.save();
  }

  const now = new Date();
  const roundDB = await Round.findOne({ status: "active" });
  if (!roundDB)
    return ctx.replyWithMarkdown(
      `*–ü–æ–¥–ø–æ–ª—å–Ω–æ–µ –í–µ—â–∞–Ω–∏–µ –ë–∞—Ç–æ–ª* \n\n‚ö†Ô∏è 9 –°–ï–ó–û–ù –ü–í–ë –ï–©–ï –ù–ï –ù–ê–ß–ê–õ–°–Ø! \n–ü—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è! –°–ª–µ–¥–∏ –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ –ü–í–ë! \n\n–ü–í–ë @veshaniebatol \n–í—Å–µ —Ç—Ä–µ–∫–∏ @pvb\\_tracks \n–¢–∞–±–ª–∏—Ü–∞ clck.ru/QygAz \n\n–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è @lvngrm\\_bot`,
      Markup.inlineKeyboard([
        Markup.callbackButton(
          "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ—É",
          JSON.stringify({ type: typesQuery.UPDATE_INFO })
        ),
      ]).extra({
        disable_web_page_preview: true,
      })
    );

  const promoRoundDB = await Round.findOne({ index: 0 });
  const firstRoundDB = await Round.findOne({ index: 1 });
  const trackDB = await Track.findOne({ user: userDB._id, round: roundDB._id });
  const lastTrackDB = await Track.findOne(
    { user: userDB._id },
    {},
    { sort: { uploadedAt: -1 } }
  ).populate("round");
  const userTracksDB = await Track.find({
    user: userDB._id,
    round: { $nin: [promoRoundDB._id] },
  });
  const countTracksCurrentRoundDB = await Track.countDocuments({
    round: roundDB._id,
  });
  const countFirstRoundTracksDB =
    firstRoundDB && firstRoundDB.theme
      ? await Track.countDocuments({ round: firstRoundDB._id })
      : countTracksCurrentRoundDB;
  const countSeasonTracksDB = await Track.estimatedDocumentCount();

  let roundUsers = "";
  if (roundDB.index > 1) {
    const prevRoundDB = await Round.findOne({ index: roundDB.index - 1 });
    const prevRoundTracksToNextDB = await Track.countDocuments({
      round: prevRoundDB._id,
      status: "next",
    });
    roundUsers = `–∏–∑ ${prevRoundTracksToNextDB}`;
  }

  const trackTotal = trackDB ? trackDB.total : 0;
  const seasonTotal = userTracksDB.reduce((acc, track) => acc + track.total, 0);

  let rapNamesStr = `*${userDB.rapName}*`;
  if (roundDB.isPaired) {
    const vsUser = await User.findOne({
      status: "active",
      currentPair: userDB.currentPair,
      rapName: { $ne: userDB.rapName },
    });
    rapNamesStr = vsUser
      ? `*${userDB.rapName}* VS *${vsUser.rapName}*`
      : `*${userDB.rapName}*`;
  }

  const minScoreStr = roundDB.minScore
    ? `\nüëÆ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª: *${roundDB.minScore}*`
    : "";
  const scoreRoundStr =
    roundDB.index === 1 ? "–û—Ü–µ–Ω–∫–∞ –∑–∞ —Ä–∞—É–Ω–¥ (+–ø—Ä–æ–º–æ):" : "–û—Ü–µ–Ω–∫–∞ –∑–∞ —Ä–∞—É–Ω–¥:";
  const scoring = innerRoundStatus[roundDB.innerStatus].toUpperCase();
  const userStatus =
    userDB.status === "finished"
      ? `–í—ã–ª–µ—Ç–µ–ª –Ω–∞ ${lastTrackDB.round.index} —Ä–∞—É–Ω–¥–µ`
      : trackDB
      ? trackStatus[trackDB.status]
      : "–ï—â–µ –Ω–µ —Å–¥–∞–ª —Ç—Ä–µ–∫";
  const finishedAt = toStringDate(roundDB.finishedAt);

  let topBtns = [
    Markup.callbackButton(
      "–¢–û–ü-10",
      JSON.stringify({ type: typesQuery.TOP_TRACKS })
    ),
    Markup.callbackButton(
      "–õ–∏—á–Ω—ã–π –¢–û–ü",
      JSON.stringify({ type: typesQuery.PERSONAL_TOP })
    ),
  ];

  const countPersonalTracksDB = await Track.countDocuments({
    user: userDB._id,
  });

  if (!countPersonalTracksDB) {
    topBtns = topBtns.slice(0, 1);
  }

  let btns = [
    [
      Markup.callbackButton(
        "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ—É",
        JSON.stringify({ type: typesQuery.UPDATE_INFO })
      ),
    ],
    topBtns,
    [
      Markup.callbackButton(
        "üí© –û–¶–ï–ù–ò–¢–¨ –¢–†–ï–ö–ò üíñ",
        JSON.stringify({ type: typesQuery.POPULAR_RATE })
      ),
    ],
    [
      Markup.callbackButton(
        "–°–¥–∞—Ç—å —Ç—Ä–µ–∫",
        JSON.stringify({ type: typesQuery.SEND_TRACK })
      ),
    ],
  ];
  if (
    (userDB.status === "empty" && roundDB.index > 1) ||
    userDB.status === "finished" ||
    now > roundDB.finishedAt ||
    trackDB
  ) {
    btns = btns.slice(0, 3);
  }

  if (
    (roundDB.index > 1 && userDB.status === "empty") ||
    userDB.status === "finished"
  )
    return ctx.replyWithMarkdown(
      `*–ü–æ–¥–ø–æ–ª—å–Ω–æ–µ –í–µ—â–∞–Ω–∏–µ –ë–∞—Ç–æ–ª* \n${roundDB.name} \n–¢–µ–º–∞: "${roundDB.theme}" \n–ü—Ä–∏–µ–º —Ç—Ä–µ–∫–æ–≤ –¥–æ 23:59 (–ú–°–ö) *${finishedAt}*. \n\n‚ö†Ô∏è ${scoring} ${minScoreStr} \n\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ä–∞—É–Ω–¥–µ: *${countTracksCurrentRoundDB}* ${roundUsers} \n–°—É–¥–µ–π –Ω–∞ —Ä–∞—É–Ω–¥–µ: *${roundDB.countReferee}* \n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${countFirstRoundTracksDB} \n–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${countSeasonTracksDB} \n\n–ü–í–ë @veshaniebatol \n–í—Å–µ —Ç—Ä–µ–∫–∏ @pvb\\_tracks \n–¢–∞–±–ª–∏—Ü–∞ clck.ru/QygAz \n\n–ü–æ–∏—Å–∫ –∏ –∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è @lvngrm\\_bot`,
      Markup.inlineKeyboard(btns).extra({
        disable_web_page_preview: true,
      })
    );

  await ctx.replyWithMarkdown(
    `*–ü–æ–¥–ø–æ–ª—å–Ω–æ–µ –í–µ—â–∞–Ω–∏–µ –ë–∞—Ç–æ–ª* \n${roundDB.name} \n–¢–µ–º–∞: "${
      roundDB.theme
    }" \n–ü—Ä–∏–µ–º —Ç—Ä–µ–∫–æ–≤ –¥–æ 23:59 (–ú–°–ö) *${finishedAt}*. \n\n‚ö†Ô∏è ${scoring} ${minScoreStr} \n\n${rapNamesStr} \n${userStatus.toUpperCase()} \n${scoreRoundStr} *${trackTotal}* \n–û—Ü–µ–Ω–∫–∞ –∑–∞ —Å–µ–∑–æ–Ω: ${seasonTotal} \n\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ä–∞—É–Ω–¥–µ: *${countTracksCurrentRoundDB}* ${roundUsers} \n–°—É–¥–µ–π –Ω–∞ —Ä–∞—É–Ω–¥–µ: *${
      roundDB.countReferee
    }* \n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${countFirstRoundTracksDB} \n–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${countSeasonTracksDB} \n\n–ü–í–ë @veshaniebatol \n–í—Å–µ —Ç—Ä–µ–∫–∏ @pvb\\_tracks \n–¢–∞–±–ª–∏—Ü–∞ clck.ru/QygAz \n\n–ü–æ–∏—Å–∫ –∏ –∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è @lvngrm\\_bot`,
    Markup.inlineKeyboard(btns).extra({
      disable_web_page_preview: true,
    })
  );
});

mainMenu.on("callback_query", checkJSONmw, async (ctx) => {
  const { type } = JSON.parse(ctx.callbackQuery.data);
  const userDB = await User.findOne({
    telegramId: ctx.from.id,
  });

  if (userDB && userDB.blocked) {
    userDB.blocked = false;
    await userDB.save();
  }

  const now = new Date();
  const roundDB = await Round.findOne({ status: "active" });
  if (!roundDB) {
    await ctx.answerCbQuery();
    return ctx.scene.enter("main_menu");
  }
  const trackDB = await Track.findOne({ user: userDB._id, round: roundDB._id });

  switch (type) {
    case typesQuery.SEND_TRACK:
      if (userDB.status === "empty" && roundDB.index > 1) {
        await ctx.answerCbQuery("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –±–∞—Ç–ª–µ!");
        return ctx.replyWithMarkdown(`‚ùóÔ∏è –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –±–∞—Ç–ª–µ!`);
      }
      if (userDB.status === "finished") {
        await ctx.answerCbQuery("–¢—ã –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–ª—å—à–µ!");
        return ctx.replyWithMarkdown(`‚ùóÔ∏è –¢—ã –Ω–µ –ø—Ä–æ—à–µ–ª –¥–∞–ª—å—à–µ!`);
      }
      if (now > roundDB.finishedAt) {
        await ctx.answerCbQuery("–ü—Ä–∏–µ–º —Ç—Ä–µ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!");
        return ctx.replyWithMarkdown(
          `‚ùóÔ∏è –¢—ã –Ω–µ —É—Å–ø–µ–ª! –ü—Ä–∏–µ–º —Ç—Ä–µ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.`
        );
      }
      if (trackDB) {
        await ctx.answerCbQuery("–¢—ã —É–∂–µ —Å–¥–∞–ª —Ç—Ä–µ–∫!");
        return ctx.replyWithMarkdown(
          `‚ùóÔ∏è –¢—ã —É–∂–µ —Å–¥–∞–ª —Ç—Ä–µ–∫! –ü–µ—Ä–µ–∑–∞–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.`
        );
      }

      await ctx.answerCbQuery();
      return ctx.scene.enter("send_track");

    case typesQuery.UPDATE_INFO:
      if (now > roundDB.finishedAt && roundDB.innerStatus !== "ending") {
        roundDB.innerStatus = "scoring";
        await roundDB.save();
      }

      await ctx.answerCbQuery();
      return ctx.scene.enter("main_menu");

    case typesQuery.POPULAR_RATE:
      const countTrackDB = await Track.countDocuments({
        user: { $ne: userDB._id },
        rateUsers: { $ne: ctx.from.id },
      });
      if (!countTrackDB) return ctx.answerCbQuery(`–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è!`);
      await ctx.answerCbQuery();
      return ctx.scene.enter("popular_rate");

    case typesQuery.TOP_TRACKS:
      await ctx.answerCbQuery();
      return ctx.scene.enter("top_tracks");

    case typesQuery.PERSONAL_TOP:
      const countPersonalTracksDB = await Track.countDocuments({
        user: userDB._id,
      });
      if (!countPersonalTracksDB)
        return ctx.answerCbQuery(`–£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤!`);

      await ctx.answerCbQuery();
      return ctx.scene.enter("personal_top");

    default:
      await ctx.replyWithMarkdown(
        `‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_.`
      );
      break;
  }

  await ctx.answerCbQuery();
});

mainMenu.use(async (ctx) => {
  await ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_.`);
});

module.exports = mainMenu;
